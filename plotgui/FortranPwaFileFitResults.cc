///////////////////////////////////////////////////////////////////////////
//
//    Copyright 2010
//
//    This file is part of rootpwa
//
//    rootpwa is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    rootpwa is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with rootpwa.  If not, see <http://www.gnu.org/licenses/>.
//
///////////////////////////////////////////////////////////////////////////
//-------------------------------------------------------------------------
// File and Version Information:
// $Rev:: 644                         $: revision of last commit
// $Author:: sschmeing                $: author of last commit
// $Date:: 2011-02-28 18:50:36 +0100 #$: date of last commit
//
// Description:
//      Code file for the FortranPwaFileFitResults class that provides
//		functionality to read in fit results integrals from
//		txt files generated by fortran pwa and store them
//
//
// Author List:
//      Stephan Schmeing          TUM            (original author)
//
//
//-------------------------------------------------------------------------

#include <sstream>

#include "FortranPwaFileFitResults.h"

using  namespace std;

// Default constructor
FortranPwaFileFitResults::FortranPwaFileFitResults( void ){
	_NumEvents = 0;
	_LogLikelihood = 0;
	_Rank = 0;
}

// Reads the rest of the information from a fit result file and returns 0 if no error occurred or a negative number as the error code
int FortranPwaFileFitResults::ReadFromFile( std::basic_istream<char>& File ) {
	string Line;
	unsigned int i, j, k; // Loop variable

	// Get number of events
	if( GetNextValidLine( File, Line ) ){
		stringstream LineStream( Line );

		// Line example between "": "       33657"
		LineStream >> _NumEvents;

		if( !_NumEvents ){
			return -17; // Number of events not correct
		}
	}
	else{
		return -3; // Unexpected end of file or reading error
	}

	// Get log(likelihood)
	if( GetNextValidLine( File, Line ) ){
		stringstream LineStream( Line );

		// Line example between "": "  -73063.303374602852"
		LineStream >> _LogLikelihood;

		if( !_LogLikelihood ){
			return -18; // log(likelihood) not correct
		}
	}
	else{
		return -3; // Unexpected end of file or reading error
	}

	// Get number of reflectivity sections
	unsigned int NumSections = 0;

	if( GetNextValidLine( File, Line ) ){
		stringstream LineStream( Line );

		// Line example between "": "           3"
		LineStream >> NumSections;

		if( !NumSections ){
			return -19; // Number of reflectivity sections not correct
		}
	}
	else{
		return -3; // Unexpected end of file or reading error
	}

	// Get number of waves of each reflectivity section
	unsigned int SecNumWaves[NumSections];
	unsigned int NumWaves = 0;

	if( GetNextValidLine( File, Line ) ){
		stringstream LineStream( Line );

		// Line example between "": "    1;   45;    7;"
		for( i = 0; i < NumSections; ++i){
			SecNumWaves[i] = 0;

			LineStream >> SecNumWaves[i];
			LineStream.ignore();

			if( !SecNumWaves[i] ){
				return -6; // Number of waves not correct
			}
			else{
				NumWaves += SecNumWaves[i];
			}
		}
	}
	else{
		return -3; // Unexpected end of file or reading error
	}

	// Get rank of each reflectivity section
	unsigned int SecRank[NumSections];
	// The rank has to be the same for each section except the flatwave section, where the rank always will be 1
	bool RankException = false; // This variable will be set to true if a section with rank 1 is found, therefore if it's true and another section with rank 1 is found, all sections have to have rank 1

	if( GetNextValidLine( File, Line ) ){
		stringstream LineStream( Line );

		// Line example between "": "    1;    2;    2;"
		for( i = 0; i < NumSections; ++i){
			SecRank[i] = 0;

			LineStream >> SecRank[i];
			LineStream.ignore();

			if( !SecRank[i] ){
				return -20; // Rank not correct
			}

			if( _Rank != SecRank[i] ){
				if( RankException ){
					if( 0 == _Rank ){
						_Rank = SecRank[i];
					}
					else{
						return -21; // Ranks not consistent
					}
				}
				else{
					if( (1 == SecRank[i]) && (1 == SecNumWaves[i]) ){ //it is possibly the flatwave section
						RankException = true;
					}
					else{
						if( 0 == _Rank ){
							_Rank = SecRank[i];
						}
						else{
							return -21; // Ranks not consistent
						}
					}
				}
			}
		}
	}
	else{
		return -3; // Unexpected end of file or reading error
	}

	// Get fit results
	char WaveNameCStr[61];
	string WaveName;
	WaveName.reserve(61);
	unsigned int LastNonEmptyCharacter;
	unsigned int CurRank;
	unsigned int l=0; // Loop variable equal to j except that it is not reseted to 0 for each section and therefore addresses _FitResults correctly
	_FitResults.ResizeTo(NumWaves,_Rank);
	std::complex<double> FitResultParameter;

	for( i = 0; i < NumSections; ++i){
		for( j = 0; j < SecNumWaves[i]; ++j){
			if( GetNextValidLine( File, Line ) ){
				stringstream LineStream( Line );

				// Example:
				// 'FLAT                                                        '(-0.398790E-15;-0.824390E-15)
				//
				// '1-(0-+)0+ f0(1400) pi S                                     '( 0.209758E+00; 0.145496E+00)
				// '1-(0-+)0+ f0(980) pi S                                      '( 0.000000E+00; 0.000000E+00)( 0.000000E+00; 0.000000E+00)
				LineStream.ignore();
				LineStream.get( WaveNameCStr, 61 );
				LineStream.ignore();

				// Fill the corresponding row of the matrix with the values from the file
				CurRank = min(SecRank[i],j+1);
				for( k = 0; k < CurRank; ++k){
					LineStream >> FitResultParameter;
					_FitResults.set( l, k, FitResultParameter );
				}

				// Fill the rest of the row of the matrix with (0,0), since in the fortran code result parameter that are always 0 are not included
				FitResultParameter = complex<double>(0,0);
				for( ; k < _Rank; ++k){
					_FitResults.set( l, k, FitResultParameter );
				}

				if( LineStream.fail() ){
					return -22; // Error reading a fit result line
				}
				else{
					WaveName = WaveNameCStr;

					// Chop of following whitespaces
					LastNonEmptyCharacter = WaveName.find_last_not_of(' ');
					WaveName.resize(LastNonEmptyCharacter + 1);

					_WaveNames.push_back( WaveName );
				}

				++l;
			}
			else{
				return -10; // Less wave names found than specified
			}
		}

		// After each section should be an empty line
		if( GetNextValidLine( File, Line ) ){
			if( !Line.empty() ){
				return -11; // More wave names found than specified
			}
		}
		else{
			return -3; // Unexpected end of file or reading error
		}


	}

	// If there are still valid lines, the number of waves in the last section is not correct
	if( GetNextValidLine( File, Line ) ){
		// Some editors put automatically an empty line at the end, so this error has to be caught
		if( !Line.empty() || GetNextValidLine( File, Line ) ){
			return -11; // More wave names found than specified
		}
	}

	return 0;
}

// Prints all important variables of class
void FortranPwaFileFitResults::Print( void ) const{
	cout << "Number of events: " << _NumEvents << '\n';
	cout << "log(likelihood): " << _LogLikelihood << '\n';
	cout << "Rank: " << _Rank << '\n';

	unsigned i,k;
	for( i=0; i < _WaveNames.size(); ++i){
		cout << '\'' << _WaveNames[i] << '\'';
		for( k=0; k < _Rank; ++k ){
			cout << _FitResults.get(i,k);
		}
		cout << '\n';
	}
}
