///////////////////////////////////////////////////////////////////////////
//
//    Copyright 2010
//
//    This file is part of rootpwa
//
//    rootpwa is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    rootpwa is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with rootpwa.  If not, see <http://www.gnu.org/licenses/>.
//
///////////////////////////////////////////////////////////////////////////
//-------------------------------------------------------------------------
// File and Version Information:
// $Rev:: 644                         $: revision of last commit
// $Author:: sschmeing                $: author of last commit
// $Date:: 2011-02-28 18:50:36 +0100 #$: date of last commit
//
// Description:
//      Code file for the FortranPwaFileObject class that provides
//		functionality to read in fit results and integrals from
//		txt files generated by fortran pwa
//
//
// Author List:
//      Stephan Schmeing          TUM            (original author)
//
//
//-------------------------------------------------------------------------

#include <sstream>

#include "FortranPwaFileObject.h"

using  namespace std;

// Reads the mass and t' bin from file
int FortranPwaFileObject::ReadBinFromFile( basic_istream<char>& File ){
	string Line;

	if( GetNextValidLine( File, Line ) ){
		stringstream LineStream( Line );

		// Line example between "": "2.50000;2.51000"
		LineStream >> _MassBinStart;
		LineStream.ignore();
		LineStream >> _MassBinEnd;

		if( LineStream.fail() ){
			return -4; // Mass bin not valid
		}
	}
	else{
		return -3; // Unexpected end of file or reading error
	}

	if( GetNextValidLine( File, Line ) ){
		stringstream LineStream( Line );

		// Line example between "": "0.00000;1.00000"
		LineStream >> _tBinStart;
		LineStream.ignore();
		LineStream >> _tBinEnd;

		if( LineStream.fail() || LineStream.bad() ){
			return -5; // t' bin not valid
		}
	}
	else{
		return -3; // Unexpected end of file or reading error
	}

	return 0;
}

// Reads the rest of the information from a fit result file
int FortranPwaFileObject::ReadFitResultFromFile( basic_istream<char>& File ){
	FortranPwaFileFitResults *DataFitResult = new FortranPwaFileFitResults();

	const int StatusTmp = DataFitResult->ReadFromFile( File );

	if( StatusTmp ){
		// An error occurred
		delete DataFitResult;
		_DataObject = 0;
		return StatusTmp;
	}
	else{
		_DataObject = DataFitResult;
		return 1; // PWA phase space integrals
	}
}

// Reads the rest of the information from a phase space integral file
int FortranPwaFileObject::ReadPhaseSpaceIntegralsFromFile( basic_istream<char>& File ){
	FortranPwaFilePhaseSpaceIntegrals *DataPhaseSpaceIntegrals = new FortranPwaFilePhaseSpaceIntegrals();

	const int StatusTmp = DataPhaseSpaceIntegrals->ReadFromFile( File );

	if( StatusTmp ){
		// An error occurred
		delete DataPhaseSpaceIntegrals;
		_DataObject = 0;
		return StatusTmp;
	}
	else{
		_DataObject = DataPhaseSpaceIntegrals;
		return 2; // PWA phase space integrals
	}
}

// Reads the rest of the information from a acceptance corrected norm integrals file
int FortranPwaFileObject::ReadAcceptanceCorrectedNormIntegralsFromFile( basic_istream<char>& File ){
	FortranPwaFileNormIntegrals *DataNormIntegrals = new FortranPwaFileNormIntegrals();

	const int StatusTmp = DataNormIntegrals->ReadFromFile( File );

	if( StatusTmp ){
		// An error occurred
		delete DataNormIntegrals;
		_DataObject = 0;
		return StatusTmp;
	}
	else{
		_DataObject = DataNormIntegrals;
		return 3; // PWA  acceptance corrected norm integrals
	}
}

// Reads the rest of the information from a non acceptance corrected norm integrals file
int FortranPwaFileObject::ReadNotAcceptanceCorrectedNormIntegralsFromFile( basic_istream<char>& File ){
	FortranPwaFileNormIntegrals *DataNormIntegrals = new FortranPwaFileNormIntegrals();

	const int StatusTmp = DataNormIntegrals->ReadFromFile( File );

	if( StatusTmp ){
		// An error occurred
		delete DataNormIntegrals;
		_DataObject = 0;
		return StatusTmp;
	}
	else{
		_DataObject = DataNormIntegrals;
		return 4; // PWA not acceptance corrected norm integrals
	}
}

// default constructor
FortranPwaFileObject::FortranPwaFileObject( void ){
	_Status = 0;
	_DataObject = 0;
	_MassBinStart = 0;
	_MassBinEnd = 0;
	_tBinStart = 0;
	_tBinEnd = 0;
}

// Returns _Status;
int FortranPwaFileObject::Status( void ) const{
	return _Status;
}

// Returns _Status as a string containing the corresponding message
string FortranPwaFileObject::StatusMessage( void ) const{
	switch( _Status ){
	case 0:
		return string("ReadFromFile has not been run yet");
	case 1:
		return string("PWA fit results");
	case 2:
		return string("PWA phase space integrals");
	case 3:
		return string("PWA acceptance corrected norm integrals");
	case 4:
		return string("PWA not acceptance corrected norm integrals");
	case -1:
		return string("File could not be open");
	case -2:
		return string("File not of any known type");
	case -3:
		return string("Unexpected end of file or reading error");
	case -4:
		return string("Mass bin not valid");
	case -5:
		return string("t' bin not valid");
	case -6:
		return string("Number of waves not correct");
	case -7:
		return string("Error reading a phase space integral line");
	case -8:
		return string("Two waves with the same name in the file");
	case -9:
		return string("Error reading a wave name line");
	case -10:
		return string("Less wave names found than specified");
	case -11:
		return string("More wave names found than specified");
	case -12:
		return string("Row of integral matrix has too many entries");
	case -13:
		return string("Row of integral matrix has not enough entries");
	case -14:
		return string("Integral matrix has too many rows");
	case -15:
		return string("Integral matrix has not enough rows");
	case -16:
		return string("Error reading a norm integral line");
	case -17:
		return string("Number of events not correct");
	case -18:
		return string("log(likelihood) not correct");
	case -19:
		return string("Number of reflectivity sections not correct");
	case -20:
		return string("Rank not correct");
	case -21:
		return string("Ranks not consistent");
	case -22:
		return string("Error reading a fit result line");
	default:
		return string("Status unknown");
	}
}

// Reading in the given file by determining it's type and calling the appropriate function to read in this type
int FortranPwaFileObject::ReadFromFile( const char *FileString ) {
	if( _Status ){
		cout << "Some data already read from file\n";
		return 0;
	}

	fstream File(FileString, fstream::in);
	string TypeString; // String of the first valid line, which determines the file type

	// If file could not be open exit with error code
	if( File.fail() ){
		_Status = -1; // File could not be open
	}
	else{
		// Determine file type by looking at the first line
		if( GetNextValidLine( File, TypeString ) ){
			// Reads bin information from file
			_Status = ReadBinFromFile( File );

			if( !_Status ){
				// Calls the function to read in the
				if( !TypeString.compare("PWA fit results") ){
					_Status = ReadFitResultFromFile( File );
				}
				else if( !TypeString.compare("PWA phase space integrals") ){
					_Status = ReadPhaseSpaceIntegralsFromFile( File );
				}
				else if( !TypeString.compare("PWA acceptance corrected norm integrals") ){
					_Status = ReadAcceptanceCorrectedNormIntegralsFromFile( File );
				}
				else if( !TypeString.compare("PWA not acceptance corrected norm integrals") ){
					_Status = ReadNotAcceptanceCorrectedNormIntegralsFromFile( File );
				}
			}
		}
		else{
			_Status = -2; // File not of any known type
		}
	}

	File.close();

	Print();

	return _Status;
}

// Clears the file object and calls destructor of the _DataObject;
void FortranPwaFileObject::Clear( void ){
	if(_Status > 0 ){
		switch( _Status ){
		case 1:
		{
			delete reinterpret_cast<const  FortranPwaFileFitResults*>(_DataObject);

			break;
		}
		case 2:
		{
			delete reinterpret_cast<const FortranPwaFilePhaseSpaceIntegrals *>(_DataObject);

			break;
		}
		case 3:
		{
			delete reinterpret_cast<const FortranPwaFileNormIntegrals *>(_DataObject);

			break;
		}
		case 4:
		{
			delete reinterpret_cast<const FortranPwaFileNormIntegrals *>(_DataObject);

			break;
		}
		}
	}

	FortranPwaFileObject();
}

// Prints all important variables of class
void FortranPwaFileObject::Print( void ) const{
	cout << StatusMessage() << '\n';

	if(_Status > 0 ){
		cout << "Mass bin: " << _MassBinStart << ';' << _MassBinEnd << '\n';
		cout << "t' bin: " << _tBinStart << ';' << _tBinEnd << '\n';

		switch( _Status ){
		case 1:
		{
			const FortranPwaFileFitResults *DataFitResult = reinterpret_cast<const  FortranPwaFileFitResults*>(_DataObject);
			DataFitResult->Print();

			break;
		}
		case 2:
		{
			const FortranPwaFilePhaseSpaceIntegrals *DataPhaseSpaceIntegrals = reinterpret_cast<const FortranPwaFilePhaseSpaceIntegrals *>(_DataObject);
			DataPhaseSpaceIntegrals->Print();

			break;
		}
		case 3:
		{
			const FortranPwaFileNormIntegrals *DataNormIntegrals = reinterpret_cast<const FortranPwaFileNormIntegrals *>(_DataObject);
			DataNormIntegrals->Print();

			break;
		}
		case 4:
		{
			const FortranPwaFileNormIntegrals *DataNormIntegrals = reinterpret_cast<const FortranPwaFileNormIntegrals *>(_DataObject);
			DataNormIntegrals->Print();

			break;
		}
		default:
			cout << "Unknown data type\n";
			break;
		}
	}
}
