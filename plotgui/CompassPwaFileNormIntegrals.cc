///////////////////////////////////////////////////////////////////////////
//
//    Copyright 2010
//
//    This file is part of rootpwa
//
//    rootpwa is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    rootpwa is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with rootpwa.  If not, see <http://www.gnu.org/licenses/>.
//
///////////////////////////////////////////////////////////////////////////
//-------------------------------------------------------------------------
// File and Version Information:
// $Rev::                             $: revision of last commit
// $Author::                          $: author of last commit
// $Date::                            $: date of last commit
//
// Description:
//      Code file for the CompassPwaFileNormIntegrals class that provides
//		functionality to read in normalization integrals from
//		txt files generated by Compass pwa and store them
//
//
// Author List:
//      Stephan Schmeing          TUM            (original author)
//
//
//-------------------------------------------------------------------------

#include <iostream>
#include <sstream>

#include "reportingUtils.hpp"

#include "CompassPwaFileNormIntegrals.h"

using namespace std;
using namespace rpwa;

bool CompassPwaFileNormIntegrals::_Debug = false;

// Default constructor
CompassPwaFileNormIntegrals::CompassPwaFileNormIntegrals(){
}

// Destructor
CompassPwaFileNormIntegrals::~CompassPwaFileNormIntegrals(){
}

// Reads the rest of the information from a norm integral file stream and returns 0 if no error occurred or a negative number as the error code
bool CompassPwaFileNormIntegrals::ReadIn( std::istream& File ){
	bool Succesful = true; // Is set to false if an error occurs and returned at the end of the function
	stringstream LineStream;
	string Line;

	// Get number of waves
	unsigned int NumWaves = 0;

	if( GetNextValidLine( File, LineStream ) ){
		// Line example between "": "          63"
		LineStream >> NumWaves;

		if( !NumWaves ){
			printErr << "Number of waves either 0 or not an unsigned int\n";
			Succesful = false;
		}
		if( !LineStream.eof() ){
			printWarn << "Number of waves entry longer than expected\n";
		}
	}
	else{
		printErr << "No valid line could be found anymore, but the number of waves were expected\n";
		Succesful = false;
	}

	// Get a map of the matrix indices of the waves sorted by their wave names
	char WaveNameCStr[61];
	string WaveName;
	WaveName.reserve(61);
	unsigned int LastNonEmptyCharacter;
	char apostrophe1; // Takes the first bracket character, which should be a apostrophe
	char apostrophe2; // Takes the second bracket character, which should be a apostrophe

	for( unsigned int i = 0; i<NumWaves; ++i ){
		if( GetNextValidLine( File, LineStream ) ){
			// Line example between "": "'1-(0-+)0+ rho pi P                                          '"
			LineStream >> apostrophe1;
			LineStream.get( WaveNameCStr, 61 );
			LineStream >> apostrophe2;

			if( LineStream.fail() ){
				printErr << "Reading error in a line that is supposed to contain a wave name\n";
				Succesful = false;
			}
			else{
				LineStream.get(); // Should not work, since line shouldn't have any more characters
				if( LineStream.good() ){
					printWarn << "Wave name line longer than expected\n";
				}

				if( apostrophe1 != '\'' || apostrophe2 != '\'' ){
					printWarn << "Wave name bracket not an apostrophe\n";
					if( _Debug ){
						printDebug << "Brackets: '" << apostrophe1 << "','"<< apostrophe2 << "'\n";
					}
				}

				WaveName = WaveNameCStr;

				// Chop of following whitespaces
				LastNonEmptyCharacter = WaveName.find_last_not_of(' ');
				WaveName.resize(LastNonEmptyCharacter + 1);

				if( !( _WaveNameIndexMap.insert( pair<const string, const unsigned int>(WaveName, i) ).second ) ){
					printErr << "Two waves with the same name in the file\n";
					Succesful = false;
				}
			}
		}
		else{
			printErr << "Less wave names found than specified\n";
			Succesful = false;
		}
	}

	// Get the matrix containing the complex normalization integrals
	_NormIntegrals.ResizeTo( NumWaves, NumWaves );
	std::complex<double> IntegralValue;

	for( unsigned int i = 0; i<NumWaves; ++i ){
		if( GetNextValidLine( File, LineStream ) ){
			// Line example between "": "( 0.000000E+00, 0.000000E+00)( 0.109340E+01, 0.000000E+00)( 0.444667E-01, 0.726679E-01)( 0.199459E-01, 0.411955E-01)( 0.154179E+00,-0.686622E-01)(-0.172735E+00,-0.429093E-01)( 0.789726E-02,-0.206901E-01)(-0.116477E-01, 0.156504E-01)(-0.302426E-01, 0.643268E-02)( 0.318435E-01,-0.148917E-01)( 0.310127E-01,-0.476772E-01)(-0.125165E-01,-0.368653E-02)(-0.411180E-01,-0.233080E-01)(-0.473948E-02,-0.224142E-01)(-0.283703E-01,-0.823654E-01)( 0.376583E-01, 0.151981E-01)(-0.678018E-01,-0.137558E-01)(-0.266481E-01, 0.106732E-01)( 0.356474E-01, 0.331425E-01)(-0.231974E-01,-0.771855E-02)(-0.115637E-01,-0.191429E-01)( 0.541066E-01,-0.149331E-01)( 0.268046E-01,-0.120750E-01)(-0.794373E-02, 0.357202E-01)( 0.182151E-01,-0.256023E-01)( 0.672150E-02,-0.474441E-01)( 0.323972E-02, 0.117669E-01)(-0.330635E-01, 0.175750E-01)(-0.471376E-01,-0.233224E-02)(-0.127516E-01,-0.113041E-01)(-0.685770E-01, 0.125201E-01)(-0.394851E-02,-0.107207E-01)(-0.432711E-01,-0.291126E-02)(-0.257547E-01,-0.247446E-01)( 0.823902E-02,-0.411495E-02)(-0.106341E+00, 0.175694E-01)(-0.744799E-01, 0.796028E-01)(-0.431313E-01,-0.130472E-01)( 0.809212E-01,-0.340972E-01)( 0.822039E-01, 0.105828E-01)(-0.200241E-02,-0.686318E-01)(-0.366912E-01,-0.165735E-01)(-0.619778E-01,-0.128380E-02)(-0.139810E-01, 0.707841E-02)(-0.841205E-02, 0.907329E-02)( 0.541984E-01,-0.678659E-02)( 0.164570E-02, 0.533742E-02)( 0.161556E-01,-0.722647E-02)(-0.924336E-01,-0.145572E-01)(-0.572031E-02,-0.624490E-02)( 0.000000E+00, 0.000000E+00)( 0.000000E+00, 0.000000E+00)( 0.000000E+00, 0.000000E+00)( 0.000000E+00, 0.000000E+00)( 0.000000E+00, 0.000000E+00)( 0.000000E+00, 0.000000E+00)( 0.000000E+00, 0.000000E+00)( 0.000000E+00, 0.000000E+00)( 0.000000E+00, 0.000000E+00)( 0.000000E+00, 0.000000E+00)( 0.000000E+00, 0.000000E+00)( 0.000000E+00, 0.000000E+00)( 0.000000E+00, 0.000000E+00)"
			for( unsigned int j = 0; j<NumWaves; ++j ){
				LineStream >> IntegralValue;
				_NormIntegrals.set( i, j, IntegralValue );
			}

			if( LineStream.fail() ){
				printErr << "Reading error in a line that is supposed to contain norm integral values (probably not enough entries)\n";
				Succesful = false;
			}

			LineStream.get(); // Should not work, since line shouldn't have any more characters
			if( LineStream.good() ){
				printErr << "Row of integral matrix has too many entries\n";
				Succesful = false;
			}
		}
		else{
			printErr << "Integral matrix has not enough rows\n";
			Succesful = false;
		}
	}

	// If there are still valid lines, the number of rows in the matrix is higher than the number of waves
	if( GetNextValidLine( File, Line ) ){
		// Some editors put automatically an empty line at the end, so this error has to be caught
		if( !Line.empty() || GetNextValidLine( File, Line ) ){
			printErr << "Integral matrix has too many rows\n";
			Succesful = false;
		}
	}

	return Succesful;
}

// Prints all important variables of class
ostream& CompassPwaFileNormIntegrals::Print( ostream& Out ) const{
	Out << "Number of waves: " << _WaveNameIndexMap.size() << '\n';

	for ( map<const string,const unsigned int>::const_iterator it = _WaveNameIndexMap.begin() ; it != _WaveNameIndexMap.end(); it++ ){
		Out << '\'' << it->first << '\'' << ' ' << it->second << '\n';
	}

	Out << _NormIntegrals;

	return Out;
}

// Combines the matching integrals from Integrals to one for the given mass bin and given waves, stores it in Destination and returns a reference to Destination
/*TCMatrix& CompassPwaFileNormIntegrals::Combine( TCMatrix& Destination, const std::map<const double, const CompassPwaFileObject *>& Integrals, const std::vector<std::string>& WaveNames, const double MassBinStart, const double MassBinEnd ){
	return Destination;
}
*/
