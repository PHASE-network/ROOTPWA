///////////////////////////////////////////////////////////////////////////
//
//    Copyright 2010
//
//    This file is part of rootpwa
//
//    rootpwa is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    rootpwa is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with rootpwa.  If not, see <http://www.gnu.org/licenses/>.
//
///////////////////////////////////////////////////////////////////////////
//-------------------------------------------------------------------------
// File and Version Information:
// $Rev:: 644                         $: revision of last commit
// $Author:: sschmeing                $: author of last commit
// $Date:: 2011-02-28 18:50:36 +0100 #$: date of last commit
//
// Description:
//      Code file for the FortranPwaFilePhaseSpaceIntegrals class that provides
//		functionality to read in phase space integrals from
//		txt files generated by fortran pwa and store them
//
//
// Author List:
//      Stephan Schmeing          TUM            (original author)
//
//
//-------------------------------------------------------------------------

#include <sstream>

#include "FortranPwaFilePhaseSpaceIntegrals.h"

using  namespace std;

// Default constructor
FortranPwaFilePhaseSpaceIntegrals::FortranPwaFilePhaseSpaceIntegrals( void ){
}

// Reads the rest of the information from a phase space integral file and returns 0 if no error occurred or a negative number as the error code
int FortranPwaFilePhaseSpaceIntegrals::ReadFromFile( std::basic_istream<char>& File ) {
	string Line;

	// Get number of waves
	unsigned int NumWaves = 0;

	if( GetNextValidLine( File, Line ) ){
		stringstream LineStream( Line );

		// Line example between "": "          63"
		LineStream >> NumWaves;

		if( !NumWaves ){
			return -6; // Number of waves not correct
		}
	}
	else{
		return -3; // Unexpected end of file or reading error
	}

	// Get a map of phase space integrals sorted by their wave names
	char WaveNameCStr[61];
	string WaveName;
	WaveName.reserve(61);
	unsigned int LastNonEmptyCharacter;
	double IntegralValue;

	for( int i = NumWaves; i--; ){
		if( GetNextValidLine( File, Line ) ){
			stringstream LineStream( Line );

			// Line example between "": "'1-(0-+)0+ rho pi P                                          '  0.890506E-02"
			LineStream.ignore();
			LineStream.get( WaveNameCStr, 61 );
			LineStream.ignore();
			LineStream >> IntegralValue;

			if( LineStream.fail() ){
				return -7; // Error reading a phase space integral line
			}
			else{
				WaveName = WaveNameCStr;

				// Chop of following whitespaces
				LastNonEmptyCharacter = WaveName.find_last_not_of(' ');
				WaveName.resize(LastNonEmptyCharacter + 1);

				if( !( _PhaseSpaceIntegralsMap.insert( pair<const string, const double>(WaveName, IntegralValue) ).second ) ){
					return -8; // Two waves with the same name in the file
				}
			}
		}
		else{
			return -10; // Less wave names found than specified
		}
	}

	// If there are still valid lines, the number of waves is not correct
	if( GetNextValidLine( File, Line ) ){
		// Some editors put automatically an empty line at the end, so this error has to be caught
		if( !Line.empty() || GetNextValidLine( File, Line ) ){
			return -11; // More wave names found than specified
		}
	}

	return 0; // No error occurred
}

// Prints all important variables of class
void FortranPwaFilePhaseSpaceIntegrals::Print( void ) const{
	cout << "Number of waves: " << _PhaseSpaceIntegralsMap.size() << '\n';

	for ( map<const string,const double>::const_iterator it = _PhaseSpaceIntegralsMap.begin() ; it != _PhaseSpaceIntegralsMap.end(); it++ ){
		cout << '\'' << it->first << '\'' << ' ' << it->second << '\n';
	}
}
