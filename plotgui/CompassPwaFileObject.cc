///////////////////////////////////////////////////////////////////////////
//
//    Copyright 2010
//
//    This file is part of rootpwa
//
//    rootpwa is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    rootpwa is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with rootpwa.  If not, see <http://www.gnu.org/licenses/>.
//
///////////////////////////////////////////////////////////////////////////
//-------------------------------------------------------------------------
// File and Version Information:
// $Rev::                             $: revision of last commit
// $Author::                          $: author of last commit
// $Date::                            $: date of last commit
//
// Description:
//      Code file for the CompassPwaFileObject class that provides
//		functionality to read in fit results and integrals from
//		txt files generated by Compass pwa
//
//
// Author List:
//      Stephan Schmeing          TUM            (original author)
//
//
//-------------------------------------------------------------------------

#include <sstream>
#include <iostream>

#include "reportingUtils.hpp"

#include "CompassPwaFileObject.h"

using namespace std;
using namespace rpwa;

bool CompassPwaFileObject::_Debug = false;

// Reads the mass and t' bin from file
bool CompassPwaFileObject::ReadBin( istream& File ){
	bool Succesful = true; // Is set to false if an error occurs and returned at the end of the function
	stringstream LineStream;
	char semicolon = 0; // Takes the separating character, which should be a semicolon

	if( CompassPwaFileBase::GetNextValidLine( File, LineStream ) ){
		// Line example between "": "2.50000;2.51000"
		LineStream >> _MassBinStart >> semicolon >> _MassBinEnd;

		if( LineStream.fail() ){
			printErr << "Mass bin not valid \n";
			Succesful = false;
			if( _Debug ){
				printDebug << "MassBin: "<< LineStream.str() << '\n';
			}
		}
		else{
			if( !LineStream.eof() ){
				printWarn << "Mass bin entry longer than expected\n";
				if( _Debug ){
					printDebug << "MassBin: "<< LineStream.str() << '\n';
				}
			}
			if( semicolon != ';' ){
				printWarn << "Mass bin separator not a semicolon\n";
				if( _Debug ){
					printDebug << "Separator: '" << semicolon << "'\n";
				}
			}
		}
	}
	else{
		Succesful = false;
		printErr << "No valid line could be found anymore, but the mass bin was expected\n";
	}

	semicolon = 0;
	if( CompassPwaFileBase::GetNextValidLine( File, LineStream ) ){
		// Line example between "": "0.00000;1.00000"
		LineStream >> _tBinStart >> semicolon >> _tBinEnd;

		if( LineStream.fail() ){
			printErr << "t' bin not valid \n";
			Succesful = false;
			if( _Debug ){
				printDebug << "t 'Bin: "<< LineStream.str() << '\n';
			}
		}
		else{
			if( !LineStream.eof() ){
				printWarn << "t' bin entry longer than expected\n";
				if( _Debug ){
					printDebug << "t 'Bin: "<< LineStream.str() << '\n';
				}
			}
			if( semicolon != ';' ){
				printWarn << "t' bin separator not a semicolon\n";
				if( _Debug ){
					printDebug << "Separator: '" << semicolon << "'\n";
				}
			}
		}
	}
	else{
		Succesful = false;
		printErr << "No valid line could be found anymore, but the t' bin was expected\n";
	}

	return Succesful;
}

// Reads the rest of the information a file specified in the template and returns -1 if an error occurred or ReturnValue if no error occurred
template<class T, CompassPwaFileObjectStatus ReturnValue> CompassPwaFileObjectStatus CompassPwaFileObject::Read( istream& File ){
	T *Data = new T();
	if( !Data ){
		printErr << "Could not allocate new data object\n";
		return Error;
	}

	if( Data->ReadIn( File ) ){
		_DataObject = Data;
		return ReturnValue;
	}
	else{
		delete Data;
		return Error;
	}
}

// Default constructor
CompassPwaFileObject::CompassPwaFileObject():
	_Status(NotLoaded),
	_DataObject(0),
	_MassBinStart(0),
	_MassBinEnd(0),
	_tBinStart(0),
	_tBinEnd(0){
}

// Destructor
CompassPwaFileObject::~CompassPwaFileObject(){
	delete _DataObject;
}

// Returns _Status;
CompassPwaFileObjectStatus CompassPwaFileObject::Status() const{
	return _Status;
}

// Returns _Status as a string containing the corresponding message
string CompassPwaFileObject::StatusMessage() const{
	switch( _Status ){
	case Error:
		return string("An error has occurred during read in process");
	case NotLoaded:
		return string("ReadFromFile has not been run yet");
	case FitResult:
		return string("PWA fit results");
	case PhaseSpaceIntegral:
		return string("PWA phase space integrals");
	case AcceptanceCorrectedNormIntegral:
		return string("PWA acceptance corrected norm integrals");
	case NotAcceptanceCorrectedNormIntegral:
		return string("PWA not acceptance corrected norm integrals");
	default:
		return string("Status unknown");
	}
}

// Returns _MassBinStart;
double CompassPwaFileObject::MassBinStart() const{
	return _MassBinStart;
}

// Returns _MassBinEnd;
double CompassPwaFileObject::MassBinEnd() const{
	return _MassBinEnd;
}

// Returns _tBinStart;
double CompassPwaFileObject::tBinStart() const{
	return _tBinStart;
}

// Returns _tBinEnd;
double CompassPwaFileObject::tBinEnd() const{
	return _tBinEnd;
}

// Returns _DataObject;
const CompassPwaFileBase *CompassPwaFileObject::DataObject() const{
	return _DataObject;
}

// Reading in the given file by determining it's type and calling the appropriate function to read in this type
CompassPwaFileObjectStatus CompassPwaFileObject::ReadFromFile( string FileString ) {
	printInfo << "Reading from File " << FileString << '\n';

	if( _Status ){
		printErr << "This object already contains non default data. Clear it before use.\n";
		return Error;
	}

	fstream File(FileString.c_str(), fstream::in);
	string TypeString; // String of the first valid line, which determines the file type

	// If file could not be open exit with error code
	if( File.fail() ){
		printErr << "File could not be opened\n";
		_Status = Error;
	}
	else{
		// Determine file type by looking at the first line
		if( CompassPwaFileBase::GetNextValidLine( File, TypeString ) ){
			// Reads bin information from file
			bool ReadBinSuccesful = ReadBin( File );

			// Calls the function to read in the
			if( "PWA fit results" == TypeString ){
				_Status = Read<CompassPwaFileFitResults, FitResult>( File ); //ReadFitResultFromFile( File );
			}
			else if( "PWA phase space integrals" == TypeString ){
				_Status = Read<CompassPwaFilePhaseSpaceIntegrals, PhaseSpaceIntegral>( File ); //ReadPhaseSpaceIntegralsFromFile( File );
			}
			else if( "PWA acceptance corrected norm integrals" == TypeString ){
				_Status = Read<CompassPwaFileNormIntegrals, AcceptanceCorrectedNormIntegral>( File ); //ReadAcceptanceCorrectedNormIntegralsFromFile( File );
			}
			else if( "PWA not acceptance corrected norm integrals" == TypeString ){
				_Status = Read<CompassPwaFileNormIntegrals, NotAcceptanceCorrectedNormIntegral>( File ); //ReadNotAcceptanceCorrectedNormIntegralsFromFile( File );
			}
			else{
				printErr << "File not of any known type \n";
				_Status = Error;
			}

			// Overwrites _Status with error if occurred during reading of the bin
			if( !ReadBinSuccesful ){
				_Status = Error;
			}
		}
		else{
			printErr << "No valid line could be found, but the file identifier was expected\n";
			_Status = Error;
		}
	}

	File.close();

	if( _Status > 0 ){
		printSucc << "Successfully read " << StatusMessage() << '\n';
	}

	if( _Debug ){
//		printDebug << *this;
	}

	return _Status;
}

// Clears the file object and calls destructor of the _DataObject;
void CompassPwaFileObject::Clear(){
	delete _DataObject;

	_Status = NotLoaded;
	_DataObject = 0;
	_MassBinStart = 0;
	_MassBinEnd = 0;
	_tBinStart = 0;
	_tBinEnd = 0;
}

// Prints all important variables of class
ostream& CompassPwaFileObject::Print( ostream& Out ) const{
	Out << StatusMessage() << '\n';

	if( _Status > 0 ){
		Out << "Mass bin: " << _MassBinStart << ';' << _MassBinEnd << '\n';
		Out << "t' bin: " << _tBinStart << ';' << _tBinEnd << '\n';

		_DataObject->Print( Out );
	}

	return Out;
}
