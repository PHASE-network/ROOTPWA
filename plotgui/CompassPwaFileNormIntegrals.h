///////////////////////////////////////////////////////////////////////////
//
//    Copyright 2010
//
//    This file is part of rootpwa
//
//    rootpwa is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    rootpwa is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with rootpwa.  If not, see <http://www.gnu.org/licenses/>.
//
///////////////////////////////////////////////////////////////////////////
//-------------------------------------------------------------------------
// File and Version Information:
// $Rev:: 836                         $: revision of last commit
// $Author:: schmeing                 $: author of last commit
// $Date:: 2011-12-21 12:31:38 +0100 #$: date of last commit
//
// Description:
//      Header file for the CompassPwaFileNormIntegrals class that provides
//		functionality to read in normalization integrals from
//		txt files generated by Compass pwa and store them
//
//
// Author List:
//      Stephan Schmeing          TUM            (original author)
//
//
//-------------------------------------------------------------------------

#ifndef CompassPwaFileNormIntegrals_H
#define CompassPwaFileNormIntegrals_H

#include <fstream>
#include <string>
#include <deque>
#include <map>

#include "TCMatrix.h"

#include "CompassPwaFileBase.h"

namespace rpwa{

	class CompassPwaFileNormIntegrals : public CompassPwaFileBase {
	private:
		// Variables
		std::map<const std::string,const unsigned int> _WaveNameIndexMap; ///< Map of the matrix indices of the waves sorted by their wave names
		TCMatrix _NormIntegrals; ///< Matrix containing the complex normalization integrals

		static bool _Debug; ///< if set to true, debug messages are printed

		// Functions

	public:
		// Constructors + Destructors
		CompassPwaFileNormIntegrals(); ///< Constructor
		~CompassPwaFileNormIntegrals(); ///< Destructor

		// Get && Set
		bool Position( unsigned int &Destination, const std::string &WaveName ) const; ///< Fills the position in the integral matrix of the wave with name WaveName into Destination and returns false if WaveName could not be found
		const std::complex<double> NormIntegral( unsigned int i, unsigned int j) const; ///< Returns the normalization integral at position (i,j) in the matrix

		static bool Debug() { return _Debug; } ///< returns debug flag
		static void SetDebug(const bool Debug = true) { _Debug = Debug; } ///< sets debug flag

		// Functions
		bool ReadIn( std::istream& File ); ///< Reads the rest of the information from a norm integral file stream and returns whether it was successful
		std::ostream& Print( std::ostream& Out ) const; ///< Prints all important variables of class
		static bool Combine( TCMatrix& Destination, const std::deque<const CompassPwaFileNormIntegrals *>& Integrals, const std::vector< std::vector<std::string> >& WaveNames, double MassBinStart, double MassBinEnd ); ///< Combines the matching integrals from Integrals to one for the given mass bin and given waves, stores it in Destination and returns a reference to Destination
	};

	inline std::ostream& operator <<( std::ostream& Out, const CompassPwaFileNormIntegrals& NormIntegral ){
		NormIntegral.Print(Out);
		Out << '\n';

		return Out;
	}

} // namespace rpwa

#endif /* CompassPwaFileNormIntegrals_H */
