///////////////////////////////////////////////////////////////////////////
//
//    Copyright 2010
//
//    This file is part of rootpwa
//
//    rootpwa is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    rootpwa is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with rootpwa.  If not, see <http://www.gnu.org/licenses/>.
//
///////////////////////////////////////////////////////////////////////////
//-------------------------------------------------------------------------
// File and Version Information:
// $Rev::                             $: revision of last commit
// $Author::                          $: author of last commit
// $Date::                            $: date of last commit
//
// Description:
//      Code file for the CompassPwaFileFitResults class that provides
//		functionality to read in fit results integrals from
//		txt files generated by Compass pwa and store them
//
//
// Author List:
//      Stephan Schmeing          TUM            (original author)
//
//
//-------------------------------------------------------------------------

#include <iostream>

#include "reportingUtils.hpp"

#include "CompassPwaFileFitResults.h"

using namespace std;
using namespace rpwa;

bool CompassPwaFileFitResults::_Debug = false;

// Default constructor
CompassPwaFileFitResults::CompassPwaFileFitResults():
	_NumEvents(0),
	_LogLikelihood(0),
	_Rank(0){
}

// Destructor
CompassPwaFileFitResults::~CompassPwaFileFitResults(){
}

// Returns _NumEvents
unsigned int CompassPwaFileFitResults::NumEvents() const{
	return _NumEvents;
}

// Returns _LogLikelihood
double CompassPwaFileFitResults::LogLikelihood() const{
	return _LogLikelihood;
}

// Returns _Rank
unsigned int CompassPwaFileFitResults::Rank() const{
	return _Rank;
}

// Returns _WaveNames
const std::vector<std::string>& CompassPwaFileFitResults::WaveNames() const{
	return _WaveNames;
}

// Returns _FitResults
const TCMatrix& CompassPwaFileFitResults::FitResults() const{
	return _FitResults;
}


// Reads the rest of the information from a fit result file stream and returns 0 if no error occurred or a negative number as the error code
bool CompassPwaFileFitResults::ReadIn( std::istream& File ){
	bool Succesful = true; // Is set to false if an error occurs and returned at the end of the function
	stringstream LineStream;
	string Line;

	// Get number of events
	if( GetNextValidLine( File, LineStream ) ){
		// Line example between "": "       33657"
		LineStream >> _NumEvents;

		if( !_NumEvents ){
			printErr << "Number of events either 0 or not an unsigned int\n";
			Succesful = false;
		}

		if( !LineStream.eof() ){
			printWarn << "Number of events entry longer than expected\n";
		}
	}
	else{
		printErr << "No valid line could be found anymore, but the number of events was expected\n";
		Succesful = false;
	}

	// Get log(likelihood)
	if( GetNextValidLine( File, LineStream ) ){
		// Line example between "": "  -73063.303374602852"
		LineStream >> _LogLikelihood;

		if( !_LogLikelihood ){
			printErr << "log(likelihood) either 0 or not a double\n";
			Succesful = false;
		}

		if( !LineStream.eof() ){
			printWarn << "log(likelihood) entry longer than expected\n";
		}
	}
	else{
		printErr << "No valid line could be found anymore, but the log(likelihood) was expected\n";
		Succesful = false;
	}

	// Get number of reflectivity sections
	unsigned int NumSections = 0;

	if( GetNextValidLine( File, LineStream ) ){
		// Line example between "": "           3"
		LineStream >> NumSections;

		if( !NumSections ){
			printErr << "Number of reflectivity sections either 0 or not a unsigned int\n";
			Succesful = false;
		}

		if( !LineStream.eof() ){
			printWarn << "Number of reflectivity sections entry longer than expected\n";
		}
	}
	else{
		printErr << "No valid line could be found anymore, but the number of reflectivity sections was expected\n";
		Succesful = false;
	}

	// Get number of waves of each reflectivity section
	unsigned int SecNumWaves[NumSections];
	unsigned int NumWaves = 0;
	char semicolon = 0;

	if( GetNextValidLine( File, LineStream ) ){
		// Line example between "": "    1;   45;    7;"
		for( unsigned int i = 0; i < NumSections; ++i){
			SecNumWaves[i] = 0;

			LineStream >> SecNumWaves[i] >> semicolon;

			if( !SecNumWaves[i] ){
				printErr << "Number of waves either 0 or not a unsigned int\n";
				Succesful = false;
			}
			else{
				if( semicolon != ';' ){
					printWarn << "Rank separator not a semicolon\n";
					if( _Debug ){
						printDebug << "Separator: '" << semicolon << "'\n";
					}
				}

				NumWaves += SecNumWaves[i];
			}
		}

		LineStream.get(); // Should not work, since line shouldn't have any more characters
		if( LineStream.good() ){
			printWarn << "Numbers of waves line longer than expected\n";
		}
	}
	else{
		printErr << "No valid line could be found anymore, but the numbers of waves were expected\n";
		Succesful = false;
	}

	// Get rank of each reflectivity section
	unsigned int SecRank[NumSections];
	// The rank has to be the same for each section except the flatwave section, where the rank always will be 1
	bool RankException = false; // This variable will be set to true if a section with rank 1 is found, therefore if it's true and another section with rank 1 is found, all sections have to have rank 1
	semicolon = 0;

	if( GetNextValidLine( File, LineStream ) ){
		// Line example between "": "    1;    2;    2;"
		for( unsigned i = 0; i < NumSections; ++i){
			SecRank[i] = 0;

			LineStream >> SecRank[i] >> semicolon;

			if( !SecRank[i] ){
				printErr << "Rank either 0 or not a unsigned int\n";
				Succesful = false;
			}
			else{
				if( semicolon != ';' ){
					printWarn << "Rank separator not a semicolon\n";
					if( _Debug ){
						printDebug << "Separator: '" << semicolon << "'\n";
					}
				}

				if( _Rank != SecRank[i] ){
					if( RankException ){
						if( 0 == _Rank ){
							_Rank = SecRank[i];
						}
						else{
							printErr << "Rank of this section is " << SecRank[i] << " but the previous sections had rank " << _Rank << " and the section of the flat wave was already found\n";
							Succesful = false;
						}
					}
					else{
						if( (1 == SecRank[i]) && (1 == SecNumWaves[i]) ){ //it is possibly the flatwave section
							RankException = true;
						}
						else{
							if( 0 == _Rank ){
								_Rank = SecRank[i];
							}
							else{
								printErr << "Rank of this section is " << SecRank[i] << " but the previous sections had rank " << _Rank << " and it cannot be the section of the flat wave\n";
								Succesful = false;
							}
						}
					}
				}
			}
		}

		LineStream.get(); // Should not work, since line shouldn't have any more characters
		if( LineStream.good() ){
			printWarn << "Ranks line longer than expected\n";
		}
	}
	else{
		printErr << "No valid line could be found anymore, but the ranks were expected\n";
		Succesful = false;
	}

	// Get fit results
	char WaveNameCStr[61];
	string WaveName;
	WaveName.reserve(61);
	unsigned int LastNonEmptyCharacter;
	unsigned int CurRank;
	unsigned int l=0; // Loop variable equal to j except that it is not reseted to 0 for each section and therefore addresses _FitResults correctly
	unsigned int k; // Loop variable that is needed unchanged in a second loop
	_FitResults.ResizeTo(NumWaves,_Rank);
	std::complex<double> FitResultParameter;
	char apostrophe1; // Takes the first bracket character, which should be a apostrophe
	char apostrophe2; // Takes the second bracket character, which should be a apostrophe

	for( unsigned i = 0; i < NumSections; ++i){
		for( unsigned j = 0; j < SecNumWaves[i]; ++j){
			if( GetNextValidLine( File, LineStream ) ){
				// Example:
				// 'FLAT                                                        '(-0.398790E-15;-0.824390E-15)
				//
				// '1-(0-+)0+ f0(1400) pi S                                     '( 0.209758E+00; 0.145496E+00)
				// '1-(0-+)0+ f0(980) pi S                                      '( 0.000000E+00; 0.000000E+00)( 0.000000E+00; 0.000000E+00)
				LineStream >> apostrophe1;
				LineStream.get( WaveNameCStr, 61 );
				LineStream >> apostrophe2;

				// Fill the corresponding row of the matrix with the values from the file
				CurRank = min(SecRank[i],j+1);
				for( k = 0; k < CurRank; ++k){
					LineStream >> FitResultParameter;
					_FitResults.set( l, k, FitResultParameter );
				}

				// Fill the rest of the row of the matrix with (0,0), since in the Compass code result parameter that are always 0 are not included
				FitResultParameter = complex<double>(0,0);
				for( ; k < _Rank; ++k){
					_FitResults.set( l, k, FitResultParameter );
				}

				if( LineStream.fail() ){
					printErr << "Reading error in a line that is supposed to contain a fit result\n";
					Succesful = false;
				}
				else{
					LineStream.get(); // Should not work, since line shouldn't have any more characters
					if( LineStream.good() ){
						printWarn << "Fit result line longer than expected\n";
					}

					if( apostrophe1 != '\'' || apostrophe2 != '\'' ){
						printWarn << "Wave name bracket not an apostrophe\n";
						if( _Debug ){
							printDebug << "Brackets: '" << apostrophe1 << "','"<< apostrophe2 << "'\n";
						}
					}

					WaveName = WaveNameCStr;

					// Chop of following whitespaces
					LastNonEmptyCharacter = WaveName.find_last_not_of(' ');
					WaveName.resize(LastNonEmptyCharacter + 1);

					_WaveNames.push_back( WaveName );
				}

				++l;
			}
			else{
				printErr << "Less wave names found than specified\n";
				Succesful = false;
			}
		}

		// After each section should be an empty line
		if( GetNextValidLine( File, Line ) ){
			if( !Line.empty() ){
				printErr << "More wave names found than specified\n";
				Succesful = false;
			}
		}
		else{
			printErr << "No valid line could be found anymore, but a blank separation line between reflectivity sections was expected\n";
			Succesful = false;
		}


	}

	// If there are still valid lines, the number of waves in the last section is not correct
	if( GetNextValidLine( File, Line ) ){
		// Some editors put automatically an empty line at the end, so this error has to be caught
		if( !Line.empty() || GetNextValidLine( File, Line ) ){
			printErr << "More wave names found than specified\n";
			Succesful = false;
		}
	}

	return Succesful;
}

// Prints all important variables of class
ostream& CompassPwaFileFitResults::Print(ostream& Out) const{
	Out << "Number of events: " << _NumEvents << '\n';
	Out << "log(likelihood): " << _LogLikelihood << '\n';
	Out << "Rank: " << _Rank << '\n';

	for( unsigned int i=0; i < _WaveNames.size(); ++i){
		Out << '\'' << _WaveNames[i] << '\'';
		for( unsigned int k=0; k < _Rank; ++k ){
			Out << _FitResults.get(i,k);
		}
		Out << '\n';
	}

	return Out;
}
