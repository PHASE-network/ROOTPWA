///////////////////////////////////////////////////////////////////////////
//
//    Copyright 2010
//
//    This file is part of rootpwa
//
//    rootpwa is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    rootpwa is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with rootpwa.  If not, see <http://www.gnu.org/licenses/>.
//
///////////////////////////////////////////////////////////////////////////
//-------------------------------------------------------------------------
// File and Version Information:
// $Rev:: 862                         $: revision of last commit
// $Author:: schmeing                 $: author of last commit
// $Date:: 2012-07-06 13:54:31 +0200 #$: date of last commit
//
// Description:
//      Header file for the CompassPwaFileBase class that provides
//		functionality to read in the next valid line of a txt file
//		generated by Compass pwa and passes it to all CompassPWAFile
//		classes
//
//
// Author List:
//      Stephan Schmeing          TUM            (original author)
//
//
//-------------------------------------------------------------------------

#ifndef CompassPwaFileLoader_H
#define CompassPwaFileLoader_H

#include <string>
#include <vector>
#include <deque>
#include <map>

#include "TTree.h"

#include "fitResult.h"

#include "CompassPwaFileObject.h"

namespace rpwa{

	class CompassPwaFileLoader{
	private:
		// Variables
		std::map<double, const CompassPwaFileNormIntegrals *> _NormIntegrals; ///< Stores CompassPwaFileObjects that store CompassPwaFileNormIntegrals as their _DataObject sorted by the starting value of their mass bin
		std::map<double, const CompassPwaFilePhaseSpaceIntegrals *> _PhaseSpaceIntegrals; ///< Stores CompassPwaFileObjects that store CompassPwaFilePhaseSpaceIntegrals as their _DataObject sorted by the starting value of their mass bin
		std::deque<const CompassPwaFileFitResults *> _FitResults; ///< Stores CompassPwaFileObjects that store CompassPwaFileFitResults as their _DataObject

		static bool _Debug; ///< if set to true, debug messages are printed

		// Functions
		bool ValidityCheck() const;
		bool DetermineNormIntegral( TCMatrix& Destination, const std::vector<std::string>& WaveNames, double MassBinStart, double MassBinEnd ); ///< Combines the matching integrals from _NormIntegrals to one for the given mass bin and given waves
		bool DeterminePhaseSpaceIntegral( std::vector<double>& Destination, const std::vector<std::string>& WaveNames, double MassBinStart, double MassBinEnd ); ///< Combines the matching integrals from _PhaseSpaceIntegrals to one for the given mass bin and given waves

	public:
		// Constructors + Destructors
		CompassPwaFileLoader(){}
		CompassPwaFileLoader( const std::string& ParticleDataFile ); ///< Constructor which reads in the particleDataTable from ParticleDataFile to enable name conversion
		~CompassPwaFileLoader(); ///< Destructor calls Clear function

		// Get && Set
		static bool Debug() { return _Debug; } ///< returns debug flag
		static void SetDebug(const bool Debug = true) { _Debug = Debug; } ///< sets debug flag

		// Functions
		void Clear(); ///< Deletes all objects stored in the three maps
		void ReadFile( const std::string& GlobPattern ); ///< Takes a filename as parameter and reads in this file, sort and store it by its type, can be called multiple times and the new file is added, but since overlapping bins are not allowed for the integrals, reading multiple times the same file will cause an error in the merging function
		void ReadFiles( const std::string& GlobPattern ); ///< Takes a glob pattern as parameter and reads in all matching files, sorts and stores them by their type, can be called multiple times and the new files are added, but since overlapping bins are not allowed for the integrals, reading multiple times the same file will cause an error in the merging function
		TTree *Merge(); ///< Merges all previously read files to a tree containing objects of fitResult class
	};

} // namespace rpwa

#endif /* CompassPwaFileLoader_H */
