Installation instructions for ROOTPWA
-------------------------------------


Prerequisites
.............

Before you can build ROOTPWA you need to install the following software:


* ROOT
  ROOT is available from
    http://root.cern.ch
  Version 5.26 or higher is needed.
  It must have been built with the configure options
    --enable-mathmore
    --enable-minuit2
  If you do not find libMinuit2.so or libMathMore.so in ${ROOTSYS}/lib,
  then you probably need to re-configure ROOT with these options


* CMake
  CMake is a cross platform build system available from
    http://cmake.org
  In addition to the documentation further information about CMake can be
  found at
    http://www.cmake.org/cmake/help/cmake_tutorial.html
    http://www.cmake.org/cmake/help/runningcmake.html
    http://www.cmake.org/cmake/help/syntax.html
    http://www.cmake.org/Wiki/CMake
    http://rachid.koucha.free.fr/tech_corner/cmake_manual.html
    http://mash-project.eu/wiki/index.php/CMake%3a_Getting_Started
  The minimum required version of CMake is 2.8.0. In case your Linux
  distribution offers only outdated packages, you can quite easily
  compile CMake yourself:

  1) Download the latest CMake release from
     http://www.cmake.org/cmake/resources/software.html
  2) Prepare installation
     &> bootstrap --prefix=<install directory>
     You can speed up things on multi-core machines using the
     --parallel=<# of processes> option. If you plan to use the CMake
     GUI, you should set the --qt-gui flag (this requires that you
     have the QT libraries installed).
  3) Compile CMake
     &> make && make install
  4) Add <install directory>/bin to your path or make an alias for cmake

  or

  1) Download the latest CMake binary (.tar.gz) from
     http://www.cmake.org/cmake/resources/software.html
     and unpack it to ~/bin/
  2) Add the path to the binary to your login shell script
     (.bashrc or .bashprofile or ...) or make an alias for cmake:
     export PATH=${HOME}/bin/cmake-2.8.1-Linux-i386/bin:${PATH}


* libconfig:
  We use the config file parser written by Mark A. Lindner available from
    http://www.hyperrealm.com/libconfig/
  The compilation and installation is straight forward. To our
  knowledge unfortunately there are no pre-compiled packages for
  common Linux platforms available. We recommend to install the
  library into the same directory as the source
  &> ./configure --prefix=/your/folder/to/install/libconfig
  &> make && make install


* Boost
  Part of the code relies on the Boost library which is available at
    http://www.boost.org
  Version 1.50.00 or higher is required.
  Boost is to a large extend a header-only library so that usually
  nothing has to be build. Just install the respective package for
  your platform or, in case you do not have administrator privileges,
  extract the source archive to a location of your choice.
  A more convenient way than downloading and extracting the tarball of
  a certain Boost version is to clone the Boost git repository
  &> git clone https://github.com/ryppl/boost-svn.git
  and then to checkout the wanted release version via
  &> cd boost-svn
  &> git checkout Boost_1_50_0
  This way one can easily switch to any existing Boost version and also
  updates are much more convenient:
  &> git checkout master
  &> git pull
  &> git checkout Boost_1_51_0
  The current branch tag is printed by
  &> git describe --tags


* CUDA (optional)
  If you have a CUDA capable nvidia Graphics Card (Shader Model 1.3 or
  higher) you may want to install the CUDA framework (version 3.0 or
  higher). The build system tries to find your CUDA installation based
  on the NVSDKCUDA_ROOT environment variable. This should point to
  <your NVIDIA_GPU_Computing_SDK directory>/C. If NVSDKCUDA_ROOT is
  not set the build system assumes the SDK to be located in
  ${HOME}/NVIDIA_GPU_Computing_SDK/C. If a CUDA installation is found,
  the CUDA features are enabled automatically.


* MPI (optional, experimental)
  In order take advantage of the parallel nature of the computing
  problems in PWA, it is planned to make some of the executables
  MPI-aware, so that they run on multi-core machines as well as on
  PC-clusters. The build system tries to find your MPI installation
  (openMPI recommended). In addition you also need to compile the
  Boost.MPI libraries (e.g. using compileBoostLibraries.sh). If the
  build system has found both the MPI and the Boost.MPI libraries, the
  MPI features are automatically enabled.


* Python (optional, experimental)

  In order to make scripting more powerful and flexible, it is planned
  to Python-ify some of the ROOTPWA classes, so that they can be
  interfaced directly. In the long term much of the house-keeping code
  that is currently implemented in shell scripts and C++ will be
  reimplemented in Python. The build system tries to find your Python
  installation automatically. For this to work you need to have the
  'python' executable in your path. In addition you also need to
  compile the Boost.Python library (e.g. using compileBoostLibraries.sh).
  If the build system has found both Python and the Boost.Python
  library, the Python features are automatically enabled. ROOTPWA
  requires Python 2.7. In case there are no packages for your
	operating system you can install Python from source as
  outlined below:

  1) Download the source tarball from www.python.org and extract it to
     a directory of you choice.

  2) Compile Python. Depending on whether you have administrator
     rights or not you might want to set the prefix accordingly
     (e.g. --prefix=`pwd`). In this case you also have to make sure to
     adapt LD_LIBRARY_PATH accordingly.
     &> ./configure --enable-shared && make && make install && make test


Building ROOTPWA
................

1) Make sure that you have installed all the packages mentioned above
   for the correct architecture: If you compile on a 32 bit machine,
   all libraries need also to be compiled for 32 bit. Similarly for 64
   bit machines all libraries (including ROOT!) have to be compiled
   for 64 bit. Mixed 32/64 bit compilation is not supported and will
   result in linker errors.

2) Make sure that your ROOT environment is setup correctly. The build
   system utilizes the root-config executable to determine the ROOT
   environment and expects it to be in the path.

3) Define the LIBCONFIG environment so that it points to the libconfig
   installation directory. The build system expects the include files
   in ${LIBCONFIG}/include and the libraries in
   ${LIBCONFIG}/lib. ${LIBCONFIG}/lib should be added to
   LD_LIBRARY_PATH.

4) If the Boost library was _not_ installed in the system directories
   you have to tell the build system, where it can find the Boost
   files by defining the BOOST_ROOT environment variable such that it
   points to the Boost top level directory.

5) Set the ROOTPWA environment variable to the path of the ROOTPWA top
   level directory. This usually is the trunk directory.

6) We use an out-of-source build strategy (one of the nice features of
   Cmake). This means that all files created by the build system will
   reside in a separate directory outside of the directories that
   contain the source code. The build system expects this directory to
   be ${ROOTPWA}/build. If such a directory does not exist yet, create
   it using
   &> mkdir ${ROOTPWA}/build

7) The contents of the build directory can be safely deleted whenever
   you feel like it, since it can be always regenerated by starting
   the build process. This is done by doing
   &> cd ${ROOTPWA}/build
   &> cmake ..
   &> make
   There is no 'make install' needed.
   If you run on a multi-core machine, you may want to use make's -j N
   parameter to run N compilation processes in parallel and thus speed
   up the whole process.
   There are four build options:
   a) RELEASE        default
   b) DEBUG          with debug symbols, no optimization
   c) RELWITHDEBINFO with debug symbols, optimization level like in RELEASE
   d) MINSIZEREL     minimum binary size
   You can choose a different build option by using Cmake's -D option
   &> cmake -D CMAKE_BUILD_TYPE=DEBUG ..
   &> cmake -D CMAKE_BUILD_TYPE=RELWITHDEBINFO ..
   &> cmake -D CMAKE_BUILD_TYPE=MINSIZEREL ..
   Cmake will print the compiler flags used in the build process.
   For debugging purposes you can enable debug output by running
   &> make VERBOSE=1

8) In order to be able to run the programs you need to add
   ${ROOTPWA}/build/lib to LD_LIBRARY_PATH. It is also a good idea to
   add ${ROOTPWA}/build/bin to the path.


There are some setup*.sh script templates that define set all the
above mentioned environment variables. You should copy one of them and
modify it according to your environment.


9) If you have doxygen installed on your system you can building a
   html documentation by doing the following:
   &> make doxygen
   The doxygen documentation will be built into the directory
   ${ROOTPWA}/html-doc/html/
   It can be viewed with any web browser, e.g.
   &> firefox ${ROOTPWA}/html-doc/html/index.html
   Once the project reaches a state beyond beta, a recent version of
   these files will be uploaded regularly on
   http://rootpwa.sourceforge.net
   As registered user (with the right permissions) you can upload the
   documentation as is explained on
   https://sourceforge.net/apps/trac/sourceforge/wiki/Project%20web:
   &> cd html-doc
   &> sftp <user>,rootpwa@web.sourceforge.net
   sftp> cd htdocs
   sftp> put html/*
   sftp> exit
