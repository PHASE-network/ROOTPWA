Installation instructions for rootpwa:

--- Before you can build rootpwa you need to install the following software:

ROOT: 
  ROOT is available from http://root.cern.ch 
  Version 5.22 or higher is needed 
  and it must have been built with the 
	--enable-mathmore 
	--enable-minuit2 
	options
  If you do not find libMinuit2.so or libMathmore.so in $ROOTSYS/lib then
  you probably need to re-configure ROOT with these options

CMAKE:
  CMake is a cross platform build system available from http://cmake.org/

BNL PWA software PWA2000:
  (this code should eventually be distributed with rootpwa)
  Available from http://ignatz.phys.rpi.edu/~jpc/john/Physics/PWA/pwa.html
  Download libpp and pwa2000 tarballs (CVS access does not work)
 
  Extract the tarballs into a common directory $PWA2000
  Set the shell variable $PWA2000 to this directory

  In order to install PWA2000 you will need 
  b) NOWEB code documentation system 
     You will need a texinfo path where you can write 
     for example: $HOME/texmf/tex
     Make sure that this is correctly installed otherwise
     any of the following steps must be repeated!
  c) YACC or BISON parser generator (installed on most systems)

--- Building PWA2000:libpp
	before you can build lipp you might have to apply 
	some patches to account for changes in the C++ standard and
	some bugfixes.
	The neccessary modifications are available in the files
	PATCH.libpp.gcc4 
	PATCH.libpp.event
	PATCH.libpp.particle
 	PATCH.libpp.lorentz
 	PATCH.libpp.matrix
	The configure script of libpp does the rest. 
	You want to choose $PWA2000 as the prefix directory.

	Do:
	&> cd $PWA2000/libpp
	&> patch -p0 </path_to/PATCH.libpp.gcc4
	&> patch -p0 </path_to/PATCH.libpp.event
	&> patch -p0 </path_to/PATCH.libpp.particle
	&> patch -p0 </path_to/PATCH.libpp.lorentz
	&> patch -p0 </path_to/PATCH.libpp.matrix
	
	&> ./configure --prefix=$PWA2000
	&> make
    	&> make install

	Make sure that you have valid header files (NOT EMPTY!) 
        in $PWA2000/include and the library libpp.a in $PWA2000/lib


--- Building PWA2000:pwa2000
	before you can build pwa2000 you might have to apply 
	some patches to account for changes in the C++ standard and
	some bugfixes.
	The neccessary modifications are available in the files
	PATCH.pwa2000.gcc4 
	PATCH.pwa2000.integral
	The configure script of pwa2000 does the rest. 
	You have to provide the paths to the libpp includes anbd libs.
	You might want to choose $PWA2000 as the prefix directory.

	Do:
	&> cd $PWA2000/pwa2000
	&> patch -p0 </path_to/PATCH.pwa2000.gcc4
	&> patch -p0 </path_to/PATCH.pwa2000.integral

	&> ./configure CPPFLAGS=-I$PWA2000/include LDFLAGS=-L$PWA2000/lib --prefix=$PWA2000
	&> make
	&> make install

	For more details see PWA2000 installation instructions
	If there are problems, check if your NOWEB installation is working!
	In case there are problems do
	&> make distclear
	&> rm *.cc *.h *.yy *.ll
	before you try again. 

--- Building rootpwa:

1) Set ROOTSYS environment variable to the location 
   where you have installed ROOT 
   (see ROOT documentation for details)
  
   FOR INSTALLATION ON LXPLUS (CERN): 
	Make sure that you have the correct root version: 32bit or 64bit. 
	Beware: A 32bit root will run on a 64bit machine BUT you will
	 fail to link against it on the wrong architecture

2) Set $PWA2000 environment variable to PWA2000 base dir (if not done already)

There is a setup.sh script template. You can modify this for future usage.

3) Build tools:

   The file CMakeLists.txt is your "user-Makefile" do not delete it.
   It can be useful to delete CMakeCache and CMakeFiles/ 
	if there appear problems.

   &> cd tools
   &> ccmake .
     Specify your prefix directory. For example: ../
	(for how this is done see CMake docu www.cmake.org)
     You will have to press (c)onfigure and then (g)enerate in order
     to configure the project and save the configuration. This will
     also generate the Makefile. (see cmake docu).
   &> make
   &> make install


3) Build main project:
   &> cd src
   &> ccmake .
     Specify your prefix (for how this is done see CMake docu www.cmake.org)
   &> make
   &> make test     # this runs some unit tests
   &> make install

4) You can use ccmake to define installation paths lib/ bin/. 
   For details see cmake documentation
