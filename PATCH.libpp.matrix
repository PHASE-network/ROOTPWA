--- matrix.nw	2004-02-10 22:20:36.000000000 +0100
+++ matrix.nw	2009-08-13 13:06:24.000000000 +0200
@@ -60,6 +60,8 @@ class matrix {
    
 		Type& el(int,int);
 		Type& element(int i,int j) { return this->el(i,j);}
+		const Type& el(int,int) const;
+		const Type& element(int i,int j) const { return this->el(i,j);}
 		matrix operator*(const matrix&) const;
 		matrix operator+(const matrix&) const;
 		matrix operator+=(const matrix&);
@@ -79,7 +81,7 @@ class matrix {
 		matrix zero();
 		threeVec operator*(const threeVec&) const;
 		fourVec operator*(const fourVec&) const;
-		matrix operator*(Type);
+		matrix operator*(Type) const;
 
 		friend fourVec operator*=<>(fourVec&,const matrix&);
 		// friend matrix operator*<>(Type,matrix&);
@@ -123,7 +125,7 @@ Type matrix<Type>::det() const
 		dt *= r.el(i,i);
 
 	if (indx)
-		delete indx;
+		delete[] indx;
 	return(d * dt);
 }
 
@@ -212,7 +214,7 @@ matrix<Type> matrix<Type>::_LU(int *d,in
 		}
 	       }
 	if (vv)
-		delete vv;
+		delete[] vv;
 	r.setStatus(1);
 	return(r);
 				
@@ -228,7 +230,7 @@ matrix<Type> matrix<Type>::LU() const
 	matrix<Type> r(this->_nrows, this->_ncols);
 	r = this->_LU(&d,indx);
 	if (indx)
-		delete indx;
+		delete[] indx;
 	return(r);
 }
 
@@ -284,7 +286,7 @@ matrix<Type> matrix<Type>::inv()
 	}
 	r.setStatus(1);
 	if (indx)
-		delete indx;
+		delete[] indx;
 	}
 	else {
 		 r= lu;
@@ -438,7 +440,7 @@ matrix<Type>  operator*(Type a,matrix<Ty
 }
 
 template <class Type>
-matrix<Type>  matrix<Type>::operator*(Type a)
+matrix<Type>  matrix<Type>::operator*(Type a) const
 {
 	matrix<Type> r(this->nrows(),this->ncols());
 	for (int i = 0; i < this->nrows(); ++i) {
@@ -458,6 +460,12 @@ Type& matrix<Type>::el(int i,int j)
 	assert( i<this->_nrows && j<this->_ncols );
 	return  _f[j + i*_ncols];
 }
+template <class Type>
+const Type& matrix<Type>::el(int i,int j) const
+{
+	assert( i<this->_nrows && j<this->_ncols );
+	return  _f[j + i*_ncols];
+}
 
 @
 The private methods [[_create]], [[_copy]], and [[_destroy]] are used by other methods such as constructors.
@@ -482,7 +490,7 @@ void matrix<Type>::_copy(const matrix<Ty
 	this->_ncols = src._ncols;
 	this->_status = src.status();
 	if (this->_f)
-		delete this->_f;
+		delete[] this->_f;
 	this->_f = new Type[src._nrows*src._ncols];
 
 	memcpy(this->_f, src._f, src._nrows*src._ncols*sizeof(Type) );
@@ -492,7 +500,7 @@ template <class Type>
 void matrix<Type>::_destroy(void)
 {
 	if (this->_f)
-		delete this->_f;
+		delete[] this->_f;
 
 	this->_f = NULL;
 	this->_nrows = 0;
